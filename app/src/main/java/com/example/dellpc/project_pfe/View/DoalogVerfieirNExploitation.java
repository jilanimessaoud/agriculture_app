package com.example.dellpc.project_pfe.View;

import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.graphics.Color;
import android.os.Bundle;
import android.support.v7.app.AppCompatDialogFragment;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.Toast;

import com.example.dellpc.project_pfe.Controleur.ConnectionDetector;
import com.example.dellpc.project_pfe.Json.DAOAjoutJson;
import com.example.dellpc.project_pfe.Model.Caracteristique_exploitation;
import com.example.dellpc.project_pfe.Model.Delegation;
import com.example.dellpc.project_pfe.Model.Exploitation;
import com.example.dellpc.project_pfe.Model.ProduitExploitation;
import com.example.dellpc.project_pfe.R;
import com.example.dellpc.project_pfe.dataBase.DAOSQlite;

import java.util.ArrayList;

public class DoalogVerfieirNExploitation extends AppCompatDialogFragment implements View.OnClickListener,AdapterView.OnItemClickListener

{
//test connection Internet
ConnectionDetector connectionDetector ;
boolean connectionInternet ,toProduit=false;
String code="0" ;

boolean modification = false , identification = false ,produit = false, carecteristique = false ;
ArrayList<Exploitation> listExp =new ArrayList<>();
ArrayList<String> codes = new ArrayList<>() ;
ArrayList<Caracteristique_exploitation> listeC = new ArrayList<>( );
ArrayList<ProduitExploitation>listeP = new ArrayList<>() ;
DialogListener listener ;
ArrayList<String>listeExploitation ;
ListView listeView ;
Button button ;
EditText editText ;
DAOSQlite DAOSQlite;
Context contextAjout ,contextActivity ;
ArrayAdapter arrayAdapter ;
    int p ;
    int testColor = 0  ;
    int color =0 ;
    int positionClick ;
    View viewClick ;
    @Override
    public Dialog onCreateDialog(Bundle savedInstanceState) {
        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
        LayoutInflater  inflater = getActivity().getLayoutInflater();
        View view = inflater.inflate(R.layout.layout_dialog_exploitation,null);
        listeExploitation = new ArrayList<>() ;
        listeView = (ListView)view.findViewById(R.id.listeDialog);
        button=(Button) view.findViewById(R.id.button);
        editText=(EditText)view.findViewById(R.id.text);
        button.setOnClickListener(this);
        listeView.setOnItemClickListener(this);

        builder.setView(view).setNegativeButton("annuler", new Dialog.OnClickListener() {
            /**
             * This method will be invoked when a button in the dialog is clicked.
             *
             * @param dialog the dialog that received the click
             * @param which  the button that was clicked (ex.
             *               {@link DialogInterface#BUTTON_POSITIVE}) or the position
             */
            @Override
            public void onClick(DialogInterface dialog, int which) {

            }
        }).setPositiveButton("ok", new DialogInterface.OnClickListener() {
            /**
             * This method will be invoked when a button in the dialog is clicked.
             *
             * @param dialog the dialog that received the click
             * @param which  the button that was clicked (ex.
             *               {@link DialogInterface#BUTTON_POSITIVE}) or the position
             */
            @Override
            public void onClick(DialogInterface dialog, int which) {

                listener.ApplyCode(code);

            }
        });
return builder.create();
    }
    public void setContext (Context contextAjout, Context contextActivity)
    {
        this.contextActivity=contextActivity;
        this.contextAjout=contextAjout ;
    }
    @Override
    public void onAttach(Context context) {
        super.onAttach(context);
        try {
            listener = (DialogListener)context ;
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    boolean testInteger()
    {
        try
        {
            Integer.parseInt(editText.getText().toString());
            return true ;
        }catch (Exception e)
        {
            return false ;
        }
    }
    Boolean testEditText()
    {
        if (!testInteger())
        {editText.setError("Vérifier");return  false ;}
        else
        {
            if (editText.getText().toString().length()!=8){editText.setError("Vérifier");return  false ;}
            else return true ;
        }
    }
    /**
     * Called when a view has been clicked.
     *
     * @param v The view that was clicked.
     */
    @Override
    public void onClick(View v) {
      connectionDetector = new ConnectionDetector(contextActivity) ;
      DAOSQlite = new DAOSQlite(contextActivity) ;
      connectionInternet =connectionDetector.isConnected() ;
        if (testEditText())
        {
           if (connectionInternet)
           {
                DAOAjoutJson DAOAjoutJson = new DAOAjoutJson(contextAjout, contextActivity);
                DAOAjoutJson.getExploitation(listeView,editText);

           }
           else
               {
                     listeExploitation = new ArrayList<>() ;

                     getListeLabel();
                     arrayAdapter = new ArrayAdapter(contextActivity,R.layout.liste_des_lieux,R.id.leux,listeExploitation);
                     listeView.setAdapter(arrayAdapter);
               }
        }

    }

    /**
     * Callback method to be invoked when an item in this AdapterView has
     * been clicked.
     * <p>
     * Implementers can call getItemAtPosition(position) if they need
     * to access the data associated with the selected item.
     *
     * @param parent   The AdapterView where the click happened.
     * @param view     The view within the AdapterView that was clicked (this
     *                 will be a view provided by the adapter)
     * @param position The position of the view in the adapter.
     * @param id       The row id of the item that was clicked.
     */
    @Override
    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
        p = position ;
        if (connectionInternet)

        {
            String  chLocCode = (String) listeView.getItemAtPosition(position);
            code  = chLocCode.substring(chLocCode.indexOf(":")+1,chLocCode.indexOf("l")).trim();
        } else
           {
               code=codes.get(position) ;
           }

        if (testColor==0)
        {
            positionClick = position ;
            viewClick=view;
            color =view.getSolidColor() ;
            view.setBackgroundColor(Color.CYAN);
            testColor++;
        }

        if ((testColor%2==0))
        {
            viewClick.setBackgroundColor(color);
            viewClick = view ;
            view.setBackgroundColor(Color.CYAN);

        }

        else if  (testColor%2!=0){
            viewClick.setBackgroundColor(color);
            viewClick = view ;
            view.setBackgroundColor(Color.CYAN);

        }

    }

    public  interface  DialogListener
    {
        void ApplyCode(String code) ;
    }
   public void setToProduit( boolean toProdui )
   {
       this.toProduit=toProdui ;
   }

   void getListeLabel ()
    {
        //liste Exploitation
        listExp = DAOSQlite.getAllExploitation(editText.getText().toString()) ;
        if (listExp.size() == 0 ) editText.setError("0 exploitation");
        //liste CAracteristique de Exploitation
        listeC= DAOSQlite.getAllCaraExploitation() ;
        //liste code l'exploitation
        codes=new ArrayList<>();
        //liste De produit
        listeP = DAOSQlite.getAllCProducExploitation() ;
        //liste de delegation
        ArrayList<Delegation> arrayListDelegation = DAOSQlite.getAllDelegation() ;

        String labelSecteur ;

        int codeDelegation ;

        String labelDelegation  ;

        String numero = null;
        //test si code Exploitation de listExp existe dans autre list
        boolean test =false ;

        for(int i=0;i<listExp.size();i++)
        {
            //nom d'un secteur
            labelSecteur  = DAOSQlite.getSecteur(String.valueOf(listExp.get(i).getSecteur())) ;
            //code d'un Delegation
            codeDelegation=Integer.parseInt(DAOSQlite.getDelegation(String.valueOf(listExp.get(i).getSecteur())).trim()) ;
            /// nom d'un un  delegation
            labelDelegation = arrayListDelegation.get(codeDelegation).getLabel();
            // verifier que Exploition i exite dans CAracteristique Exploitation
            test =  testcode(listExp.get(i).getCodExploitation()) ;
            // modification = false pour ajout
            if (!modification)
            {
                // toProdui = true =>Activity choixProduit
                if (!toProduit)
                {
                    if (!test)

                    {
                        //recuperation code de exploitation
                        numero=String.valueOf(listExp.get(i).getCodExploitation()) ;
                        //listeExploitation =>liste nom de produit
                        listeExploitation.add("numéro : " + numero + " localisation : " + labelDelegation + " / " + labelSecteur);
                        // ajout numero a liste de code de produit
                        codes.add(numero) ;


                    }
                }
                // pour activity choixProduit
                else
                {
                    numero=String.valueOf(listExp.get(i).getCodExploitation()) ;
                    listeExploitation.add("numéro : " + numero + " localisation : " + labelDelegation + " / " + labelSecteur);
                    codes.add(numero) ;
                }
            }
            // modification = true (cas de modification)
            else
            {
                //modification identification d'exploitation (modification = true)
                if  (identification)
                {
                    numero=String.valueOf(listExp.get(i).getCodExploitation()) ;
                    listeExploitation.add("numéro : " + numero + " localisation : " + labelDelegation + " / " + labelSecteur);
                    codes.add(numero) ;
                }
                // modification de caracterisitque Exploitation(caracteristique=true et idetification = false)
                else if (carecteristique)
                {
                    // verifier que code dans listeExp existe dans liste caracteristique Ecploitation
                    if (test)
                    {

                        numero=String.valueOf(listExp.get(i).getCodExploitation()) ;
                        listeExploitation.add("numéro : " + numero + " localisation : " + labelDelegation + " / " + labelSecteur);
                        codes.add(numero) ;


                    }
                }
            }
        }
    }
    //verifier que code existe dans un Arraylist
   boolean testcode(int code )
    {
        for (int i = 0 ; i<listeC.size();i++)
        {
            //test code existe dans liste ProduitExploitatipn
            if (toProduit)
            {
                if (listeP.get(i).getCodeExploitation()==code) return true;

            }//test code Existe dans CAracteristiqueExploitation
            else
                {

                    if (listeC.get(i).getCode()==code) return true ;
                }
        }
        return false ;
    }

   public void setCheckModification(boolean identification ,boolean modification, boolean produit,boolean carecteristique)
    {
        this.carecteristique = carecteristique ;
        this.produit=produit ;
        this.modification=modification ;
        this.identification=identification ;
    }
}


