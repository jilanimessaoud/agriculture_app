package com.example.dellpc.project_pfe.Controleur;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.FragmentManager;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.View;
import android.widget.EditText;
import android.widget.Toast;

import com.example.dellpc.project_pfe.Json.DAOModificationJuson;
import com.example.dellpc.project_pfe.Model.Exploitation;
import com.example.dellpc.project_pfe.Model.Secteur;
import com.example.dellpc.project_pfe.R;
import com.example.dellpc.project_pfe.View.CaracteristiqueExploitationEtape2;
import com.example.dellpc.project_pfe.View.DoalogVerfieirNExploitation;
import com.example.dellpc.project_pfe.dataBase.DAOSQlite;

import java.util.ArrayList;

public class ControleurModificationIdentificationExploitation implements View.OnClickListener
{
    DAOSQlite DAOSQlite;
    Context contextModification ,contextActivity ;
    EditText codeExploitation , codesSecteur , codeDelegation ,cinGerant,cinExploitant ;
    FragmentManager fragmentManager ;
    Bundle bundle ;
    Exploitation exploitation ;
    ConnectionDetector connectionDetector  ;
    boolean connnectionInternet ;
   int sizeDelegation ;
    public ControleurModificationIdentificationExploitation(Context contextModification, Context contextActivity, EditText codeExploitation, EditText codesSecteur, EditText codeDelegation, EditText cinGerant, EditText cinExploitant, FragmentManager fragmentManager, Bundle bundle) {
        this.contextModification = contextModification;
        this.contextActivity = contextActivity;
        this.codeExploitation = codeExploitation;
        this.codesSecteur = codesSecteur;
        this.codeDelegation = codeDelegation;
        this.cinGerant = cinGerant;
        this.cinExploitant = cinExploitant;
        this.fragmentManager = fragmentManager;
        this.bundle = bundle;
    }
    boolean testInteger(EditText editText )
    {
        try {
            Integer.parseInt(editText.getText().toString()) ;
            return true ;
        } catch (NumberFormatException e) {

            return false ;
        }
    }
    boolean testLong (String text ){

        if (text.length()!=8)
            return false;
        else return  true ;

    }
    public  TextWatcher textWatcher = new TextWatcher() {
        @Override
        public void beforeTextChanged(CharSequence s, int start, int count, int after) {

        }

        @Override
        public void onTextChanged(CharSequence s, int start, int before, int count) {
            connectionDetector = new ConnectionDetector(contextActivity) ;
            connnectionInternet=connectionDetector.isConnected() ;
            DAOSQlite = new DAOSQlite(contextActivity) ;
            if (!connnectionInternet)
            {
                getExploitationSqlite();
            }
            else
                {
                    DAOModificationJuson modificationJuson = new DAOModificationJuson(contextModification,contextActivity);
                    modificationJuson.chercher(codeExploitation,cinGerant,cinExploitant,codeDelegation,codesSecteur,0,bundle);

                }

            if(codeExploitation.getText().toString().length()==0)
            {
                codesSecteur.setText(null);
                codeDelegation.setText(null);
                cinGerant.setText(null);
                cinExploitant.setText(null);

            }

        }

        @Override
        public void afterTextChanged(Editable s) {

        }
    };
    boolean erreurEdittext(EditText editText)
    {
        if (!(testInteger(editText)&&testLong(editText.getText().toString())))
        {
            editText.setError("vérifier : " + editText.getHint().toString());
            return false ;
        }
        else return true ;
    }
    // veifier que le longuer du text = size(size >>>listeSecteur )
    public   boolean testSize(EditText editText , int size)
    {

        if (testInteger(editText))
        {  if (!(Integer.parseInt(editText.getText().toString())>0&&Integer.parseInt(editText.getText().toString())<=11))
        {
            editText.setError("Vérifier "+ editText.getHint().toString() );
            return false ;
        }
            if (Integer.parseInt(editText.getText().toString())>size){return false ;}
            else
                return  true ;
        }
        else {
            editText.setError("Vérifier "+ editText.getHint().toString() );
            return false ;}

    }
    // verifier que le code secteur existe dans mon base de donné
    public boolean testCodeSecteur (boolean testDelegation)
    {
        if (testDelegation == false) {codesSecteur.setError("Vérifier "+ codeDelegation.getHint().toString() );return false ;}
        if (!testInteger(codesSecteur)){codesSecteur.setError("Vérifier "+ codesSecteur.getHint().toString() );return false ;}
        ///verifier que code de secteur a été  saisir>= primier elem de listeSeecteur
        boolean test1ErCode ;
        // verifier que  code de secteur a été saisir <= dernier elem
        boolean testFinCode ;
        ArrayList<Secteur> secteurs = new ArrayList<>() ;
        secteurs = DAOSQlite.getAllSecteur(codeDelegation.getText().toString());
        test1ErCode = Integer.valueOf(codesSecteur.getText().toString())>=secteurs.get(0).getCode_secteur();
        testFinCode =Integer.valueOf(codesSecteur.getText().toString())<=secteurs.get(secteurs.size()-1).getCode_secteur();
        if (test1ErCode&&testFinCode)return true ;
        else {codesSecteur.setError("Vérifier "+ codesSecteur.getHint().toString() );return false ;}
    }
void save()
{
            Exploitation exploitation =null ;
            boolean testcinG=erreurEdittext(cinGerant),testcin = erreurEdittext(cinExploitant)
            ,testsecteur =testInteger(codesSecteur),testExpl=testInteger(codeExploitation),
            testDelegation = testSize(codeDelegation,sizeDelegation),testSecteur =testCodeSecteur(testDelegation);
            if (testcinG&&testcin&&testsecteur&&testExpl&&testDelegation&&testSecteur)
            {
              exploitation = new Exploitation() ;
                exploitation.setSecteur(Integer.parseInt(codesSecteur.getText().toString()));
                exploitation.setCodExploitation(Integer.parseInt(codeDelegation.getText().toString()));
                exploitation.setCinGerant(cinGerant.getText().toString());
                exploitation.setCinExploitant(cinExploitant.getText().toString());

                if  (connnectionInternet)
                {
                    DAOModificationJuson modificationJuson = new DAOModificationJuson(contextModification,contextActivity) ;
                    modificationJuson.ModificationExploitation(exploitation.toString(),codeExploitation,cinGerant,cinExploitant);
                }
                else
                {
                    boolean modifData = DAOSQlite.modificationExploitation(exploitation) ;
                    Toast.makeText(contextActivity.getApplicationContext(),"operation terminée Avec succès",Toast.LENGTH_LONG).show();


                }

            }
            }

    void alert()
    {
        DoalogVerfieirNExploitation viewDialogInfoOcpSol = new DoalogVerfieirNExploitation() ;
        viewDialogInfoOcpSol.setCheckModification(true,true,false,false);
        viewDialogInfoOcpSol.setContext(contextModification,contextActivity);
        viewDialogInfoOcpSol.show(fragmentManager,"ok");
    }
    /**
     * Called when a view has been clicked.
     *
     * @param v The view that was clicked.
     */
    @Override
    public void onClick(View v) {
        connectionDetector = new ConnectionDetector(contextActivity) ;
        connnectionInternet=connectionDetector.isConnected() ;
        DAOSQlite = new DAOSQlite(contextActivity) ;
        sizeDelegation = DAOSQlite.getAllDelegation().size();
        switch (v.getId()){

    case R.id.info :
        alert();
        break;
    case R.id.suivant :
        if (connnectionInternet)
        {
            DAOModificationJuson modificationJuson = new DAOModificationJuson(contextModification,contextActivity);
            modificationJuson.chercher(codeExploitation,cinGerant,cinExploitant,codeDelegation,codesSecteur, R.id.suivant,bundle);

        }
        else
            {


                if (exploitation==null)
                {
                    codeExploitation.setError("Vérifier " +codeExploitation.getHint().toString() );
                }
                else
                    {
                        setIntent();
                    }
            }
        codesSecteur.setError(null);
        codeDelegation.setError(null);
        cinGerant.setError(null);
        cinExploitant.setError(null);
        break;

}
    }
    void getExploitationSqlite () {
        if (testInteger(codeExploitation))
        {
            exploitation = DAOSQlite.getExploitation(codeExploitation.getText().toString());
            if (exploitation == null)
            {
               // codeExploitation.setError("Vérifier");
                codesSecteur.setText(null);
                codeDelegation.setText(null);
                cinGerant.setText(null);
                cinExploitant.setText(null);

            } else {
                codesSecteur.setText(String.valueOf(exploitation.getSecteur()));
                cinGerant.setText(exploitation.getCinGerant());
                cinExploitant.setText(exploitation.getCinExploitant());
                codeDelegation.setText(DAOSQlite.getDelegation(String.valueOf(exploitation.getSecteur())));

            }
        }
        else exploitation=null ;
    }
void setIntent()
{
    Intent intent = new Intent(contextActivity.getApplicationContext(),CaracteristiqueExploitationEtape2.class) ;
    bundle.putString("cinGerant",cinGerant.getText().toString());
    bundle.putString("cinExploitant",cinExploitant.getText().toString());
    bundle.putInt("Codesecteur",Integer.parseInt(codesSecteur.getText().toString())); ;
    bundle.putString("numeroExploiataion",codeExploitation.getText().toString()); ;
    intent.putExtras(bundle) ;
    contextActivity.startActivity(intent);

}
}
