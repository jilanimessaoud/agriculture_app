package com.example.dellpc.project_pfe.View;

import android.content.Intent;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.TextView;

import com.example.dellpc.project_pfe.Controleur.ConnectionDetector;
import com.example.dellpc.project_pfe.Json.DAOJsonConsulter;
import com.example.dellpc.project_pfe.Model.Personne;
import com.example.dellpc.project_pfe.R;
import com.example.dellpc.project_pfe.dataBase.DAOSQlite;

import java.util.ArrayList;

public class ListeExploitant extends AppCompatActivity {
EditText textCin ;
ListView listView ;
Personne personne ;
ArrayList<Personne> listPersonne =new ArrayList<>() ;
DAOSQlite DAOSQlite;

ConnectionDetector connectionDetector ;
 DAOJsonConsulter DAOJsonConsulter;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_liste_exploitant);
        inial();
       setView();
    }
    void inial()
    {
        DAOSQlite =new DAOSQlite(this) ;
        connectionDetector = new ConnectionDetector(this);
        textCin = (EditText)findViewById(R.id.textCin) ;
        listView = (ListView)findViewById(R.id.liste) ;
    }
    void setView()
    {
        String[] Assurances = getResources().getStringArray(R.array.TypeAssurance);
        String[] entrDev = getResources().getStringArray(R.array.AutravesDevelop);
        String[] nVInstrction = getResources().getStringArray(R.array.NV_inst);
        String[] formation = getResources().getStringArray(R.array.typeFormation);
        String[] diplome = getResources().getStringArray(R.array.diplome);
        String[] ActiPrn = getResources().getStringArray(R.array.activite);
        if (connectionDetector.isConnected())
        {
            DAOJsonConsulter = new DAOJsonConsulter(ListeExploitant.this,this);
            DAOJsonConsulter.getListeExploitant(listView,Assurances,entrDev,nVInstrction,formation,diplome,ActiPrn);

        }
        else
            {
                getAllExploitant();
               CustomorAdapteur customorAdapteur = new CustomorAdapteur(Assurances,entrDev,nVInstrction,formation,diplome,ActiPrn);
                listView.setAdapter(customorAdapteur);
            }
       textCin.addTextChangedListener(textWatcher);


    }
    TextWatcher textWatcher = new TextWatcher() {
        @Override
        public void beforeTextChanged(CharSequence s, int start, int count, int after) {

        }

        @Override
        public void onTextChanged(CharSequence s, int start, int before, int count)
        {
            String[] Assurances = getResources().getStringArray(R.array.TypeAssurance);
            String[] entrDev = getResources().getStringArray(R.array.AutravesDevelop);
            String[] nVInstrction = getResources().getStringArray(R.array.NV_inst);
            String[] formation = getResources().getStringArray(R.array.typeFormation);
            String[] diplome = getResources().getStringArray(R.array.diplome);
            String[] ActiPrn = getResources().getStringArray(R.array.activite);
             if (connectionDetector.isConnected())
              DAOJsonConsulter.getExploitant(listView,Assurances,entrDev,nVInstrction,formation,diplome,ActiPrn,textCin);
        else
            {
                getAllExploitant();
                CustomorAdapteur customorAdapteur = new CustomorAdapteur(Assurances,entrDev,nVInstrction,formation,diplome,ActiPrn);
                listView.setAdapter(customorAdapteur);
            }
        }

        @Override
        public void afterTextChanged(Editable s) {

        }
    };
    class CustomorAdapteur extends BaseAdapter
    {
        String[] Assurances , entrDev , nVInstrction , formation, diplome , ActiPrn ;

        public CustomorAdapteur(String[] assurances, String[] entrDev, String[] nVInstrction, String[] formation, String[] diplome, String[] actiPrn) {
            this.Assurances = assurances;
            this.entrDev = entrDev;
            this.nVInstrction = nVInstrction;
            this.formation = formation;
            this.diplome = diplome;
            ActiPrn = actiPrn;
        }


        @Override
        public int getCount() {

            return listPersonne.size();
        }

        @Override
        public Object getItem(int position) {
            return null;
        }

        @Override
        public long getItemId(int position) {
            return 0;
        }

        @Override
        public View getView(int position, View convertView, ViewGroup parent) {

            convertView=getLayoutInflater().inflate(R.layout.itms_exploitant,null);
            TextView textView0 = convertView.findViewById(R.id.t0) ;
            TextView textView1 = convertView.findViewById(R.id.t1) ;
            TextView textView2 = convertView.findViewById(R.id.t2) ;
            TextView textView3 = convertView.findViewById(R.id.t3) ;
            TextView textView4 = convertView.findViewById(R.id.t5) ;
            TextView textView5 = convertView.findViewById(R.id.t6) ;
            TextView textView6 = convertView.findViewById(R.id.t7) ;
            TextView textView7 = convertView.findViewById(R.id.t8) ;
            TextView textView8 = convertView.findViewById(R.id.t9) ;
            TextView textView9 = convertView.findViewById(R.id.t10) ;
            TextView textView10 = convertView.findViewById(R.id.t11) ;
            TextView textView11 = convertView.findViewById(R.id.t12) ;
            TextView textView12= convertView.findViewById(R.id.t13) ;
            TextView textView13= convertView.findViewById(R.id.t4) ;
            TextView textView14= convertView.findViewById(R.id.t14) ;
            TextView textView15= convertView.findViewById(R.id.t15) ;

            personne = listPersonne.get(position) ;
            textView1.setText(textView1.getText()+" "+personne.getNom()+" "+personne.getPrenom());
            textView2.setText(textView2.getText()+" "+String.valueOf(personne.getAge()));
            textView3.setText(textView3.getText()+" "+String.valueOf(personne.getCodePostale()+" "+personne.getSecteur()+" "+personne.getDelegation()+" "+personne.getGouvernorat()));
            textView4.setText(textView4.getText()+" "+personne.getTlf());
            textView5.setText(textView5.getText()+" "+personne.getCnss());
            if (testInteger(personne.getNiveauInstruction()))
            {
                if (nVInstrction.length>Integer.parseInt( personne.getNiveauInstruction()))
                {
                    textView6.setText(textView6.getText()+" "+nVInstrction[Integer.parseInt( personne.getNiveauInstruction())]);

                }
            }
            if (testInteger(personne.getTypeFormation()))
            {
                if (formation.length>Integer.parseInt(personne.getTypeFormation()))
                {
                    textView7.setText(textView7.getText()+" "+formation[Integer.parseInt(personne.getTypeFormation())]);
                }
            }

            if (testInteger(personne.getAssurance()))

            {
                if (Assurances.length>Integer.parseInt(personne.getAssurance()))
                {
                    textView8.setText(textView8.getText()+" "+Assurances[Integer.parseInt(personne.getAssurance())]);
                }
            }


            textView9.setText(textView9.getText()+" "+personne.getCredit());
            if (testInteger(personne.getTypeDiplome()))
            {
                if (diplome.length>Integer.parseInt(personne.getTypeDiplome()))
                {
                    textView10.setText(textView10.getText()+" "+diplome[Integer.parseInt(personne.getTypeDiplome())]);

                }
            }

            textView11.setText(textView11.getText()+" "+String.valueOf(personne.getnBFamileHomme()));

            textView12.setText(textView12.getText()+" "+String.valueOf(personne.getnBFamileFemme()));

            textView0.setText(textView0.getText()+" "+personne.getCin());

            textView13.setText(textView13.getText()+" "+personne.getSexe());
            if (testInteger(personne.getActivitePrincipale()))
            {
                if (ActiPrn.length>Integer.parseInt(personne.getActivitePrincipale()))
                {
                    textView14.setText(textView14.getText()+" "+ActiPrn[Integer.parseInt(personne.getActivitePrincipale())]);

                }

            }
            if (testInteger(personne.getEntravesDeveloppement()))
            {
                if (entrDev.length>Integer.parseInt(personne.getEntravesDeveloppement()))
                {
                    textView15.setText(textView15.getText()+" "+entrDev[Integer.parseInt(personne.getEntravesDeveloppement())]);

                }
            }

            return convertView ;
        }
    }
    void getAllExploitant ()
    {
        listPersonne = DAOSQlite.getAllPersonne(textCin.getText().toString()) ;
    }
    boolean testInteger(String text)
    {
        try {
            Integer.parseInt(text) ;
            return  true ;
        } catch (NumberFormatException e) {
            e.printStackTrace();
            return false ;
        }
    }
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menusortie,menu);
        return true;
    }


    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        int id = item.getItemId();
        Intent intent ;
        if (id ==R.id.itmexit)

        {
        }


        return super.onOptionsItemSelected(item);
    }
}

