package com.example.dellpc.project_pfe.View;

import android.content.Context;
import android.content.Intent;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.BaseAdapter;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.TextView;

import com.example.dellpc.project_pfe.Controleur.ConnectionDetector;
import com.example.dellpc.project_pfe.Json.DAOJsonConsulter;
import com.example.dellpc.project_pfe.Model.Delegation;
import com.example.dellpc.project_pfe.Model.Exploitation;
import com.example.dellpc.project_pfe.R;
import com.example.dellpc.project_pfe.dataBase.DAOSQlite;

import java.util.ArrayList;

public class ViewListeExploitation extends AppCompatActivity {
    EditText textCin ;
    ListView listView ;
    DAOSQlite DAOSQlite;
    ConnectionDetector connectionDetector ;
    ArrayList<Delegation> listDelegation=new ArrayList() ;
    ArrayList<Exploitation> listeExploitation= new ArrayList() ;
    DAOJsonConsulter DAOJsonConsulter;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_consol_donner);
        inial();
        setListView();
    }
    void inial()
    {
        final Context context = ViewListeExploitation.this ;
        DAOSQlite =new DAOSQlite(this) ;
        listDelegation= DAOSQlite.getAllDelegation() ;
        connectionDetector = new ConnectionDetector(this);
        textCin = (EditText)findViewById(R.id.textCin) ;
        listView = (ListView)findViewById(R.id.liste) ;
        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
    @Override
    public void onItemClick(AdapterView<?> parent, View view, int position, long id)
    {
        Intent intent = new Intent(getApplicationContext(),ViewListeProduit.class) ;
        Bundle bundle = new Bundle() ;
        TextView code =  (TextView) view.findViewById(R.id.t0) ;
        bundle.putString("code",code.getText().toString());
        intent.putExtras(bundle) ;
        startActivity(intent);
     }
});
    }
    void setListView()
    {

        if (!connectionDetector.isConnected())
        {
            getAllExploitant();
            CustomorAdapteur customorAdapteur = new CustomorAdapteur();
            listView.setAdapter(customorAdapteur);
        }
        else
        {
            DAOJsonConsulter = new DAOJsonConsulter(ViewListeExploitation.this,this);
            DAOJsonConsulter.getExploitation(listView,textCin);

        }
        textCin.addTextChangedListener(textWatcher);
    }


    class CustomorAdapteur extends BaseAdapter
    {

        public CustomorAdapteur() {

        }


        @Override
        public int getCount() {

            return listeExploitation.size();
        }

        @Override
        public Object getItem(int position) {
            return null;
        }

        @Override
        public long getItemId(int position) {
            return 0;
        }

        @Override
        public View getView(int position, View convertView, ViewGroup parent) {

            convertView=getLayoutInflater().inflate(R.layout.itms_exploitoitation,null);

            TextView textView0 = convertView.findViewById(R.id.t0) ;
            TextView textView1 = convertView.findViewById(R.id.t1) ;
            TextView textView2 = convertView.findViewById(R.id.t2) ;
            TextView textView3 = convertView.findViewById(R.id.t3) ;
            TextView textView4 = convertView.findViewById(R.id.t4) ;
            TextView textView5 = convertView.findViewById(R.id.t5) ;
            TextView textView6 = convertView.findViewById(R.id.t6) ;
            TextView textView7 = convertView.findViewById(R.id.t7) ;
            TextView textView8 = convertView.findViewById(R.id.t8) ;
            TextView textView9 = convertView.findViewById(R.id.t9) ;
            TextView textView10 = convertView.findViewById(R.id.t10) ;
            TextView textView11 = convertView.findViewById(R.id.t11) ;
            TextView textView12= convertView.findViewById(R.id.t12) ;
            TextView textView13= convertView.findViewById(R.id.t13) ;
            TextView textView14= convertView.findViewById(R.id.t14) ;
            textView0.setText(textView0.getText().toString()+" "+String.valueOf(listeExploitation.get(position).getCodExploitation()));
            textView1.setText(textView1.getText().toString()+" "+listeExploitation.get(position).getCinExploitant());
            textView2.setText(textView2.getText().toString()+" "+listeExploitation.get(position).getCinGerant());


            String code =    DAOSQlite.getDelegation(String.valueOf(listeExploitation.get(position).getSecteur())) ;
            Delegation delegation = listDelegation.get(Integer.parseInt(code)-1);

            textView3.setText(textView3.getText().toString()+" "+delegation.getLabel());
            textView4.setText(textView4.getText().toString()+" "+ DAOSQlite.getSecteur(String.valueOf(listeExploitation.get(position).getSecteur())));
            textView5.setText(textView5.getText().toString()+" "+String.valueOf(listeExploitation.get(position).getSpTotale()));
            textView6.setText(textView6.getText().toString()+" "+String.valueOf(listeExploitation.get(position).getSpLabourable()));
            textView7.setText(textView7.getText().toString()+" "+String.valueOf(listeExploitation.get(position).getSpCultivee()));
            textView8.setText(textView8.getText().toString()+" "+String.valueOf(listeExploitation.get(position).getSpIrrigable()));
            textView9.setText(textView9.getText().toString()+" "+String.valueOf(listeExploitation.get(position).getNombreEmploiyer()));
            textView10.setText(textView10.getText().toString()+" "+String.valueOf(listeExploitation.get(position).getSourceEau()));
            textView11.setText(textView11.getText().toString()+" "+String.valueOf(listeExploitation.get(position).getNombrePuits()));
            textView12.setText(textView12.getText().toString()+" "+String.valueOf(listeExploitation.get(position).getNombresSondage()));
            textView13.setText(textView13.getText().toString()+" "+String.valueOf(listeExploitation.get(position).getTypeEngrais()));
            textView14.setText(textView14.getText().toString()+" "+String.valueOf(listeExploitation.get(position).getTypeSanitaire()));






            return convertView ;
        }
    }
    TextWatcher textWatcher = new TextWatcher() {
        @Override
        public void beforeTextChanged(CharSequence s, int start, int count, int after) {

        }

        @Override
        public void onTextChanged(CharSequence s, int start, int before, int count) {
            if (!connectionDetector.isConnected())
            {
                getAllExploitant();
                CustomorAdapteur customorAdapteur = new CustomorAdapteur();
                listView.setAdapter(customorAdapteur);
            }
            else
                {
                    listView.setAdapter(null);
                    DAOJsonConsulter.getExploitation(listView,textCin);
                }

        }

        @Override
        public void afterTextChanged(Editable s) {

        }
    };
    void getAllExploitant ()
    {
        listeExploitation = DAOSQlite.RechercherExploitation(textCin.getText().toString());
    }
    boolean testInteger(String text)
    {
        try {
            Integer.parseInt(text) ;
            return  true ;
        } catch (NumberFormatException e) {
            e.printStackTrace();
            return false ;
        }
    }
    boolean testDouble(String text)
    {
        try {
            Double.parseDouble(text) ;
        return true ;
        } catch (NumberFormatException e) {
            e.printStackTrace();
            return false ;
        }
    }

    public View getViewByPosition(int pos, ListView listView) {
        final int firstListItemPosition = listView.getFirstVisiblePosition();
        final int lastListItemPosition = firstListItemPosition + listView.getChildCount() - 1;

        if (pos < firstListItemPosition || pos > lastListItemPosition ) {
            return listView.getAdapter().getView(pos, null, listView);
        } else {
            final int childIndex = pos - firstListItemPosition;
            return listView.getChildAt(childIndex);
        }
    }
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menusortie,menu);
        return true;
    }


    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        int id = item.getItemId();
        Intent intent ;
        if (id ==R.id.itmexit)

        {
        }


        return super.onOptionsItemSelected(item);
    }
}
